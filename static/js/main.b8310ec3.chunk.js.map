{"version":3,"sources":["components/Visualize.js","components/Algorithms.js","components/Result.js","App.js","index.js"],"names":["Visualize","props","state","processes","grid","colors","ctx","this","refs","canvas","getContext","font","fillStyle","textAlign","fillText","i","length","description","name","x","y","fits","j","beginPath","rect","stroke","fill","find","id","ref","width","height","React","Component","inputSeparator","values","split","xValues","yValues","push","parseInt","processFits","startX","startY","lengthX","lengthY","fillGrid","processName","alphabet","algorithms","lf","input","inputX","inputY","Array","from","addedProcesses","process","bf","gap","wf","rf","min","max","random","Math","floor","Result","SpecificAlgorithm","algorithm","App","useState","value","arrays","userArray","setUserArray","choice","setChoice","render","setRender","setAlgorithm","handleChoice","event","target","handleButton","useEffect","onSubmit","preventDefault","className","type","checked","onChange","trim","replace","onClick","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b8310ec3.chunk.js","sourcesContent":["import React from 'react';\n\nfunction getRandomColor() {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n}\n\nclass Visualize extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            processes: props.processes,\n            grid: props.grid\n        };\n\n    }\n\n\n    componentDidMount() {\n        const colors = ['Green', 'Red', '#FF00FF', 'LightSeaGreen', 'Gold', 'Aqua', 'Olive', 'Orange', 'RoyalBlue', 'Maroon'];\n        const canvas = this.refs.canvas;\n        const ctx = canvas.getContext('2d');\n\n        ctx.font = '14px Comic Sans Mr';\n        ctx.fillStyle = 'black';\n        ctx.textAlign = 'bottom';\n        ctx.fillText(\"Etapp\", 0, 20);\n        ctx.fillText(\"Lisatud protsess\", 50, 20);\n        for (let i = 0; i < 50; i++) {\n            ctx.fillText(i, i * 20 + 150, 20);\n        }\n        for (let i = 0; i < this.state.grid.length; i++) {\n            if (this.state.processes.length > i) {\n                const description = this.state.processes[i].name + \" : \" + this.state.processes[i].x + \",\" + this.state.processes[i].y;\n                ctx.fillText(i + 1, 0, i * 20 + 40);\n                ctx.fillText(description, 50, i * 20 + 40);\n            }\n            if (this.state.processes.length - 1 === i && this.state.processes[this.state.processes.length - 1].fits === false) {\n                ctx.fillStyle = 'black';\n                for (let j = 0; j < this.state.grid[i].length; j++) {\n                    ctx.beginPath();\n                    ctx.rect(j * 20 + 145, i * 20 + 25, 20, 20);\n                    ctx.stroke();\n                    ctx.fill()\n                }\n                ctx.fillStyle = 'white';\n                ctx.fillText('Protsess ei mahu mällu', 600, i * 20 + 40);\n            } else {\n                for (let j = 0; j < this.state.grid[i].length; j++) {\n                    ctx.beginPath();\n                    ctx.rect(j * 20 + 145, i * 20 + 25, 20, 20);\n                    ctx.stroke();\n                    if (this.state.grid[i][j] !== '-') {\n                        ctx.fillStyle = colors[this.state.processes.find(x => x.name === this.state.grid[i][j]).id - 1];\n                    } else {\n                        ctx.fillStyle = '#D3D3D3';\n                    }\n                    ctx.fill();\n                    ctx.fillStyle = 'black';\n                    ctx.fillText(this.state.grid[i][j], j * 20 + 150, i * 20 + 40)\n\n                }\n            }\n        }\n    }\n\n\nrender()\n{\n    return (\n        <div>\n            <canvas ref=\"canvas\" width={1150} height={230}></canvas>\n        </div>\n    )\n}\n;\n}\n\n\nexport default Visualize;","import React from 'react';\nimport Visualize from \"./Visualize\";\n\nfunction inputSeparator(values) {\n    values = values.split(/,|;/);\n    let xValues = [];\n    let yValues = [];\n\n    for (let i = 0; i < values.length; i++) {\n        if (i % 2 === 0) {\n            xValues.push(parseInt(values[i]))\n        } else {\n            yValues.push(parseInt(values[i]))\n        }\n    }\n    return [xValues, yValues];\n}\n\nfunction getRandomInteger(min, max) {\n    return Math.floor(Math.random() * (max - min) ) + min;\n}\n\nconst processFits = (startX, startY, lengthX, lengthY, grid) => {\n    let y = 0;\n\n    while (y < lengthY) {\n        for (let i = 0; i < lengthX; i++) {\n            if (startY + y > 9 || startX + i > 49 || grid[startY + y][startX + i] !== '-') {\n                return false;\n            }\n        }\n        y++;\n    }\n    return true;\n};\n\nconst fillGrid = (startX, startY, lengthX, lengthY, grid, processName) => {\n\n    let y = 0;\n\n    while (y < lengthY) {\n\n        for (let j = 0; j < lengthX; j++) {\n            grid[startY + y][startX + j] = processName;\n        }\n        y++;\n    }\n\n    return grid;\n};\n\nconst alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'];\n\n\n\nconst LF = (props) => {\n\n    const input = inputSeparator(props.values);\n    const inputX = input[0];\n    const inputY = input[1];\n\n    let grid = Array.from(Array(10), () => (Array.from(Array(50), () => \"-\")));\n    const addedProcesses = [];\n\n    for (let process = 0; process < inputX.length; process++) {\n\n        addedProcesses[process] = {id: process + 1, name: alphabet[process], x: inputX[process], y: inputY[process], fits: true};\n\n        let x = 0;\n\n        for (let i = 0; i < 50; i++) {\n            if (grid[process][i] !== '-') {\n                if (processFits(i + 1, process, inputX[process], inputY[process], grid)) {\n                    x = i + 1;\n                }\n            }\n        }\n        if (x === 0 && !processFits(x, process, inputX[process], inputY[process], grid)) {\n            addedProcesses[process].fits = false;\n            break;\n        } else {\n            grid = fillGrid(x, process, inputX[process], inputY[process], grid, alphabet[process])\n        }\n\n    }\n\n    return (\n        <div>\n            <p>Visualiseeritud algoritm: <strong>Last-Fit</strong></p>\n            <Visualize processes={addedProcesses} grid={grid}/>\n        </div>\n\n    )\n}; // LF end\n\nconst BF = (props) => {\n\n    const input = inputSeparator(props.values);\n    const inputX = input[0];\n    const inputY = input[1];\n\n    let grid = Array.from(Array(10), () => (Array.from(Array(50), () => \"-\")));\n    const addedProcesses = [];\n\n    for (let process = 0; process < inputX.length; process++) {\n        addedProcesses[process] = {id: process + 1, name: alphabet[process], x: inputX[process], y: inputY[process], fits: true};\n\n        let x = 0;\n        let gap = 0;\n\n        for (let i = 0; i < 50; i++) {\n            if (grid[process][i] !== '-') {\n                if (processFits(i + 1, process, inputX[process], inputY[process], grid)) {\n\n                    for (let j = i + inputX[process]; j < 50; j++) {\n                        if (grid[process][j] !== '-' || j === 49) {\n                            if (j - i - 1 < gap || gap === 0) {\n                                gap = j - i - 1;\n                                x = i + 1;\n                                i = j;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (x === 0 && !processFits(x, process, inputX[process], inputY[process], grid)) {\n            addedProcesses[process].fits = false;\n            break;\n        } else {\n            grid = fillGrid(x, process, inputX[process], inputY[process], grid, alphabet[process])\n        }\n\n    }\n\n    return (\n        <div>\n            <p>Visualiseeritud algoritm: <strong>Best Fit</strong></p>\n            <Visualize processes={addedProcesses} grid={grid}/>\n        </div>\n    )\n}; // BF end\n\nconst WF = (props) => {\n\n    const input = inputSeparator(props.values);\n    const inputX = input[0];\n    const inputY = input[1];\n\n    let grid = Array.from(Array(10), () => (Array.from(Array(50), () => \"-\")));\n    const addedProcesses = [];\n\n    for (let process = 0; process < inputX.length; process++) {\n        addedProcesses[process] = {id: process + 1, name: alphabet[process], x: inputX[process], y: inputY[process], fits: true};\n\n        let x = 0;\n        let gap = 0;\n\n        for (let i = 0; i < 50; i++) {\n            if (grid[process][i] !== '-') {\n                if (processFits(i + 1, process, inputX[process], inputY[process], grid)) {\n\n                    for (let j = i + inputX[process]; j < 50; j++) {\n                        if (grid[process][j] !== '-' || j === 49) {\n                            if (j - i - 1 > gap) {\n                                gap = j - i - 1;\n                                x = i + 1;\n                                i = j;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (x === 0 && !processFits(x, process, inputX[process], inputY[process], grid)) {\n            addedProcesses[process].fits = false;\n            break;\n        } else {\n            grid = fillGrid(x, process, inputX[process], inputY[process], grid, alphabet[process])\n        }\n\n    }\n\n    return (\n        <div>\n            <p>Visualiseeritud algoritm: <strong>Worst Fit</strong></p>\n            <Visualize processes={addedProcesses} grid={grid}/>\n        </div>\n    )\n}; // WF end\n\nconst RF = (props) => {\n\n    const input = inputSeparator(props.values);\n    const inputX = input[0];\n    const inputY = input[1];\n\n    let grid = Array.from(Array(10), () => (Array.from(Array(50), () => \"-\")));\n    const addedProcesses = [];\n\n    for (let process = 0; process < inputX.length; process++) {\n        addedProcesses[process] = {id: process + 1, name: alphabet[process], x: inputX[process], y: inputY[process], fits: true};\n\n        let x = [];\n\n        for (let i = 0; i < 50; i++) {\n            if (grid[process][i] !== '-') {\n                if (processFits(i + 1, process, inputX[process], inputY[process], grid)) {\n                    x.push(i + 1);\n                    i += inputX[process];\n                }\n            }\n        }\n        if (x.length === 0) {\n            if (!processFits(0, process, inputX[process], inputY[process], grid)) {\n                addedProcesses[process].fits = false;\n                break;\n            } else {\n                grid = fillGrid(0, process, inputX[process], inputY[process], grid, alphabet[process])\n            }\n        } else {\n            const random = getRandomInteger(0, x.length);\n            grid = fillGrid(x[random], process, inputX[process], inputY[process], grid, alphabet[process])\n        }\n    }\n\n    return (\n        <div>\n            <p>Visualiseeritud algoritm: <strong>Random Fit</strong></p>\n            <Visualize processes={addedProcesses} grid={grid}/>\n        </div>\n    )\n}; // RF end\n\nexport {\n    LF,\n    BF,\n    WF,\n    RF\n};","import React from 'react';\nimport {LF, BF, WF, RF} from './Algorithms';\n\nconst algorithms = {\n    lf: LF,\n    bf: BF,\n    wf: WF,\n    rf: RF\n};\n\nconst Result = (props) => {\n    const SpecificAlgorithm = algorithms[props.algorithm];\n    const values = props.values;\n    return (\n        <SpecificAlgorithm values={values}/>\n    )\n};\n\nexport default Result;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Result from \"./components/Result\";\n\n\nconst App = () => {\n    const [arrays] = useState([\n        {id: 1, name: 'Esimene', value: \"1,8;35,4;3,6;4,2;1,4;3,3;1,2;5,1;50,1\"},\n        {id: 2, name: 'Teine', value: \"1,10;6,6;3,9;2,4;1,6;5,2;1,4;5,2;2,1;2,7\"},\n        {id: 3, name: 'Kolmas', value: \"5,10;6,6;3,9;8,4;3,6;5,12;1,4;15,3;3,4;9,7\"},\n        {id: 4, name: 'Enda oma', value: \"\"}\n    ]);\n\n    // 4,5;2,7;9,2;4,6;7,1;6,4;8,8;3,6;1,10;9,2\n    // 1,8;35,4;3,6;4,2;1,4;3,3;1,2;5,1;50,1\n    // 1,10;6,6;3,9;2,4;1,6;5,2;1,4;5,2;2,1;2,7\n    // 5,10;6,6;3,9;8,4;3,6;5,12;1,4;15,3;3,4;9,7\n    // for testing\n    // 1,8;35,4;3,6;4,2;1,4;3,3;1,2;5,1;50,1\n\n    const [userArray, setUserArray] = useState('');\n\n    const [choice, setChoice] = useState('0');\n\n    const [render, setRender] = useState(true);\n\n    const [algorithm, setAlgorithm] = useState('lf');\n\n    const handleUserArray = (event) => {\n        setUserArray(event.target.value.trim().replace(/,{2,}/, ',').replace(/;{2,}/, ';').replace(/[^0-9,;]/, \"\"));\n    };\n\n    const handleChoice = (event) => {\n        setChoice(event.target.value);\n    };\n\n    const handleButton = (event) => {\n        setAlgorithm(event.target.value);\n    };\n\n    const start = (event) => {\n        event.preventDefault();\n        setRender(false);\n        arrays[3].value = userArray;\n    };\n\n    useEffect(() => {\n        setRender(true)\n    }, [render]);\n\n    return (\n        <div>\n            <h3>Vali või sisesta kuni kümneelemendiline järjend kujul 3,5;2,7;8,2;4,6;7,1;6,4;8,8;3,6;1,10;9,2</h3>\n            <div>\n                <form onSubmit={start}>\n                    <div className=\"radio\">\n\n                        <label className='label'>\n                            <input type=\"radio\" value={'0'} checked={choice === '0'} onChange={handleChoice}/>\n                            {arrays[0].name}\n                        </label>\n\n                        {arrays[0].value}\n\n                    </div>\n\n                    <div className=\"radio\">\n\n                        <label className='label'>\n                            <input type=\"radio\" value={'1'} checked={choice === '1'} onChange={handleChoice}/>\n                            {arrays[1].name}\n                        </label>\n\n                        {arrays[1].value}\n\n                    </div>\n                    <div className=\"radio\">\n\n                        <label className='label'>\n                            <input type=\"radio\" value={'2'} checked={choice === '2'} onChange={handleChoice}/>\n                            {arrays[2].name}{}\n                        </label>\n\n                        {arrays[2].value}\n\n                    </div>\n                    <div className=\"radio\">\n                        <label className='label'>\n                            <input type=\"radio\" value={'3'} checked={choice === '3'} onChange={handleChoice}/>\n                            {arrays[3].name}\n                        </label>\n                        <input value={userArray} onChange={handleUserArray}/>\n                    </div>\n                    <h4>Vajuta nupule, et algoritm käivitada.</h4>\n                    <div>\n                        <button onClick={handleButton} value=\"lf\" type=\"submit\">Last-Fit</button>\n                        <button onClick={handleButton} value=\"bf\" type=\"submit\">Best-Fit</button>\n                        <button onClick={handleButton} value=\"wf\" type=\"submit\">Worst-Fit</button>\n                        <button onClick={handleButton} value=\"rf\" type=\"submit\">Random-Fit</button>\n                    </div>\n                </form>\n            </div>\n            <div className=\"graph\">\n                {render && <Result values={arrays[parseInt(choice)].value} algorithm={algorithm}/>}\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}